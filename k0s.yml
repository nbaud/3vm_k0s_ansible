---
- hosts: localhost
  become: yes
  tasks:
    - name: Gather facts about the master
      setup:
      
    - name: Set API address fact
      set_fact:
        api_address: "10.0.0.10"

    - name: Install dependencies
      apt:
        name: [curl, apt-transport-https, lsb-release, ntp, ntpdate]
        state: present

    - name: Stop NTP service
      systemd:
        name: ntp
        state: stopped
        enabled: no

    - name: Configure NTP servers
      shell:
        cmd: ntpdate pool.ntp.org
      args:
        executable: /bin/bash

    - name: Start NTP service
      systemd:
        name: ntp
        state: started
        enabled: yes

    - name: Add Kubernetes apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Stop unattended-upgrades service
      systemd:
        name: unattended-upgrades
        state: stopped
      ignore_errors: true

    - name: Install kubectl
      apt:
        name: kubectl
        state: present

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Ensure /etc/k0s directory exists
      file:
        path: /etc/k0s
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Place k0s configuration
      template:
        src: k0s_config.j2
        dest: /etc/k0s/k0s.yaml
        owner: root
        group: root
        mode: '0644'
      notify:
        - restart k0s

    - name: Install k0s on the master
      shell:
        cmd: curl -sSLf https://get.k0s.sh | sh
        creates: /usr/local/bin/k0s
      args:
        executable: /bin/bash  

    - name: Set up k0s as a system service on master
      command:
        cmd: k0s install controller --enable-worker
      args:
        creates: /etc/systemd/system/k0scontroller.service

    - name: Start the k0s service
      systemd:
        name: k0scontroller
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Wait for 10 seconds
      wait_for:
        timeout: 10

    - name: Ensure /root/.kube directory exists
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy the admin kubeconfig to the default location for kubectl
      copy:
        src: /var/lib/k0s/pki/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: '0644'

- hosts: 10.0.0.11:10.0.0.12
  become: yes
  serial: 1
  vars:
    api_address: 10.0.0.10
  tasks:
    - name: Install dependencies
      apt:
        name: [curl, apt-transport-https, lsb-release, ntp, ntpdate]
        state: present

    - name: Stop NTP service
      systemd:
        name: ntp
        state: stopped
        enabled: no

    - name: Configure NTP servers
      shell:
        cmd: ntpdate pool.ntp.org
      args:
        executable: /bin/bash

    - name: Start NTP service
      systemd:
        name: ntp
        state: started
        enabled: yes

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Stop unattended-upgrades service
      systemd:
        name: unattended-upgrades
        state: stopped
      ignore_errors: true

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Install k0s on the workers
      shell:
        cmd: curl -sSLf https://get.k0s.sh | sh
        creates: /usr/local/bin/k0s
      args:
        executable: /bin/bash

    - name: Generate and get join token for this worker
      command: k0s token create --role=worker --status-socket /run/k0s/status.sock
      delegate_to: localhost
      register: join_token

    - name: Save the join token to a file on the worker
      copy:
        content: "{{ join_token.stdout }}"
        dest: "/tmp/token.cluster"

    - name: Check if k0sworker service file exists
      stat:
        path: /etc/systemd/system/k0sworker.service
      register: k0sworker_service_file

    - name: Join worker node to the cluster using token file
      command:
        cmd: k0s install worker --token-file /tmp/token.cluster
      when: not k0sworker_service_file.stat.exists

  handlers:
    - name: restart k0s
      systemd:
        name: k0scontroller
        state: restarted
        daemon_reload: yes

